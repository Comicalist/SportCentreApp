import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/activity.dart';

class ActivityService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static const String _collection = 'activities';

  /// Get all activities from Firestore
  static Stream<List<Activity>> getActivities() {
    return _firestore
        .collection(_collection)
        .orderBy('date')
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        Map<String, dynamic> data = doc.data();
        data['id'] = doc.id; // Use Firestore document ID
        return Activity.fromJson(data);
      }).toList();
    });
  }

  /// Get activities filtered by category
  static Stream<List<Activity>> getActivitiesByCategory(String category) {
    if (category == 'All') {
      return getActivities();
    }
    
    return _firestore
        .collection(_collection)
        .where('category', isEqualTo: category)
        .orderBy('date')
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        Map<String, dynamic> data = doc.data();
        data['id'] = doc.id;
        return Activity.fromJson(data);
      }).toList();
    });
  }

  /// Add a new activity to Firestore
  static Future<String> addActivity(Activity activity) async {
    try {
      // Don't include the ID in the data since Firestore will generate it
      Map<String, dynamic> activityData = activity.toJson();
      activityData.remove('id');
      
      DocumentReference docRef = await _firestore
          .collection(_collection)
          .add(activityData);
      
      return docRef.id;
    } catch (e) {
      throw Exception('Failed to add activity: $e');
    }
  }

  /// Update an existing activity
  static Future<void> updateActivity(Activity activity) async {
    try {
      Map<String, dynamic> activityData = activity.toJson();
      activityData.remove('id'); // Don't update the ID field
      
      await _firestore
          .collection(_collection)
          .doc(activity.id)
          .update(activityData);
    } catch (e) {
      throw Exception('Failed to update activity: $e');
    }
  }

  /// Delete an activity
  static Future<void> deleteActivity(String activityId) async {
    try {
      await _firestore
          .collection(_collection)
          .doc(activityId)
          .delete();
    } catch (e) {
      throw Exception('Failed to delete activity: $e');
    }
  }

  /// Get a single activity by ID
  static Future<Activity?> getActivity(String activityId) async {
    try {
      DocumentSnapshot doc = await _firestore
          .collection(_collection)
          .doc(activityId)
          .get();
      
      if (doc.exists) {
        Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Activity.fromJson(data);
      }
      return null;
    } catch (e) {
      throw Exception('Failed to get activity: $e');
    }
  }

  /// Add sample activities for testing
  static Future<void> addSampleActivities() async {
    final sampleActivities = [
      Activity(
        id: '', // Will be generated by Firestore
        name: 'Morning Yoga Flow',
        description: 'Start your day with energizing yoga poses and mindful breathing',
        category: 'Wellness',
        date: DateTime.now().add(const Duration(days: 1)),
        time: '07:00',
        location: 'Studio A',
        price: 15.0,
        pointsReward: 50,
        capacity: 15,
        spotsLeft: 5,
        imageUrl: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=300&h=200&fit=crop',
        requirements: ['Yoga mat', 'Water bottle'],
      ),
      Activity(
        id: '',
        name: 'HIIT Training',
        description: 'High-intensity interval training for maximum calorie burn',
        category: 'Fitness',
        date: DateTime.now().add(const Duration(days: 1)),
        time: '18:00',
        location: 'Gym Floor',
        price: 20.0,
        pointsReward: 75,
        capacity: 12,
        spotsLeft: 3,
        imageUrl: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=300&h=200&fit=crop',
        requirements: ['Towel', 'Water bottle'],
      ),
      Activity(
        id: '',
        name: 'Kids Swimming Lessons',
        description: 'Fun swimming lessons for children aged 6-12',
        category: 'Kids',
        date: DateTime.now().add(const Duration(days: 2)),
        time: '16:00',
        location: 'Pool Area',
        price: 25.0,
        pointsReward: 60,
        capacity: 8,
        spotsLeft: 2,
        imageUrl: 'https://images.unsplash.com/photo-1530549387789-4c1017266635?w=300&h=200&fit=crop',
        requirements: ['Swimwear', 'Towel', 'Swimming cap'],
      ),
    ];

    for (Activity activity in sampleActivities) {
      await addActivity(activity);
    }
  }
}